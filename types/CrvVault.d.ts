/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CrvVaultInterface extends ethers.utils.Interface {
  functions: {
    "crvPool()": FunctionFragment;
    "crvStGauge()": FunctionFragment;
    "crvToken()": FunctionFragment;
    "emergencyWithdraw()": FunctionFragment;
    "farmCrvLdoRewards(uint256,uint256)": FunctionFragment;
    "ldoPool()": FunctionFragment;
    "ldoToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "reInvestRewards()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setTokenAddresses(address,address,address)": FunctionFragment;
    "setUtilityAddresses(address,address,address,address)": FunctionFragment;
    "stEthPool()": FunctionFragment;
    "stakeLp(uint256)": FunctionFragment;
    "steCRV()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstakeLp()": FunctionFragment;
    "vaultCompoundedLp()": FunctionFragment;
    "vaultLdoRewardFunds()": FunctionFragment;
    "vaultLpFunds()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "crvPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "crvStGauge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "crvToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "farmCrvLdoRewards",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ldoPool", values?: undefined): string;
  encodeFunctionData(functionFragment: "ldoToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reInvestRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddresses",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUtilityAddresses",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "stEthPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeLp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "steCRV", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unstakeLp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vaultCompoundedLp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultLdoRewardFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultLpFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "crvPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crvStGauge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crvToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmCrvLdoRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ldoPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ldoToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reInvestRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUtilityAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stEthPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeLp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "steCRV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstakeLp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultCompoundedLp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultLdoRewardFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultLpFunds",
    data: BytesLike
  ): Result;

  events: {
    "CrvWithdrawn(uint256)": EventFragment;
    "EthWithdrawn(uint256)": EventFragment;
    "Farmed(address,uint256,uint256)": EventFragment;
    "LdoWithdrawn(uint256)": EventFragment;
    "LpWithdrawn(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "TokenAddressesSet(address,address,address)": EventFragment;
    "UtilityAddressesSet(address,address,address,address)": EventFragment;
    "unstaked(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CrvWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Farmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LdoWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LpWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAddressesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UtilityAddressesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "unstaked"): EventFragment;
}

export type CrvWithdrawnEvent = TypedEvent<[BigNumber] & { amount: BigNumber }>;

export type EthWithdrawnEvent = TypedEvent<[BigNumber] & { amount: BigNumber }>;

export type FarmedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    crvAmount: BigNumber;
    ldoAmount: BigNumber;
  }
>;

export type LdoWithdrawnEvent = TypedEvent<[BigNumber] & { amount: BigNumber }>;

export type LpWithdrawnEvent = TypedEvent<[BigNumber] & { amount: BigNumber }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type StakedEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export type TokenAddressesSetEvent = TypedEvent<
  [string, string, string] & {
    steCRV: string;
    crvToken: string;
    ldoToken: string;
  }
>;

export type UtilityAddressesSetEvent = TypedEvent<
  [string, string, string, string] & {
    crvStGauge: string;
    crvPool: string;
    ldoPool: string;
    stEthPool: string;
  }
>;

export type unstakedEvent = TypedEvent<
  [string, BigNumber] & { user: string; unstakedLp: BigNumber }
>;

export class CrvVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CrvVaultInterface;

  functions: {
    crvPool(overrides?: CallOverrides): Promise<[string]>;

    crvStGauge(overrides?: CallOverrides): Promise<[string]>;

    crvToken(overrides?: CallOverrides): Promise<[string]>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    farmCrvLdoRewards(
      _crvAmount: BigNumberish,
      _ldoAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ldoPool(overrides?: CallOverrides): Promise<[string]>;

    ldoToken(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    reInvestRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenAddresses(
      _steCrv: string,
      _crvToken: string,
      _ldoToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUtilityAddresses(
      _crvStGauge: string,
      _crvPool: string,
      _ldoPool: string,
      _stEthPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stEthPool(overrides?: CallOverrides): Promise<[string]>;

    stakeLp(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    steCRV(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeLp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultCompoundedLp(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultLdoRewardFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultLpFunds(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  crvPool(overrides?: CallOverrides): Promise<string>;

  crvStGauge(overrides?: CallOverrides): Promise<string>;

  crvToken(overrides?: CallOverrides): Promise<string>;

  emergencyWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  farmCrvLdoRewards(
    _crvAmount: BigNumberish,
    _ldoAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ldoPool(overrides?: CallOverrides): Promise<string>;

  ldoToken(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  reInvestRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenAddresses(
    _steCrv: string,
    _crvToken: string,
    _ldoToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUtilityAddresses(
    _crvStGauge: string,
    _crvPool: string,
    _ldoPool: string,
    _stEthPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stEthPool(overrides?: CallOverrides): Promise<string>;

  stakeLp(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  steCRV(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeLp(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultCompoundedLp(overrides?: CallOverrides): Promise<BigNumber>;

  vaultLdoRewardFunds(overrides?: CallOverrides): Promise<BigNumber>;

  vaultLpFunds(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    crvPool(overrides?: CallOverrides): Promise<string>;

    crvStGauge(overrides?: CallOverrides): Promise<string>;

    crvToken(overrides?: CallOverrides): Promise<string>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<boolean>;

    farmCrvLdoRewards(
      _crvAmount: BigNumberish,
      _ldoAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ldoPool(overrides?: CallOverrides): Promise<string>;

    ldoToken(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    reInvestRewards(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setTokenAddresses(
      _steCrv: string,
      _crvToken: string,
      _ldoToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setUtilityAddresses(
      _crvStGauge: string,
      _crvPool: string,
      _ldoPool: string,
      _stEthPool: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stEthPool(overrides?: CallOverrides): Promise<string>;

    stakeLp(_amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    steCRV(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeLp(overrides?: CallOverrides): Promise<boolean>;

    vaultCompoundedLp(overrides?: CallOverrides): Promise<BigNumber>;

    vaultLdoRewardFunds(overrides?: CallOverrides): Promise<BigNumber>;

    vaultLpFunds(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "CrvWithdrawn(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    CrvWithdrawn(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "EthWithdrawn(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    EthWithdrawn(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "Farmed(address,uint256,uint256)"(
      user?: string | null,
      crvAmount?: null,
      ldoAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; crvAmount: BigNumber; ldoAmount: BigNumber }
    >;

    Farmed(
      user?: string | null,
      crvAmount?: null,
      ldoAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; crvAmount: BigNumber; ldoAmount: BigNumber }
    >;

    "LdoWithdrawn(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    LdoWithdrawn(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "LpWithdrawn(uint256)"(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    LpWithdrawn(
      amount?: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Staked(address,uint256)"(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    Staked(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    "TokenAddressesSet(address,address,address)"(
      steCRV?: null,
      crvToken?: null,
      ldoToken?: null
    ): TypedEventFilter<
      [string, string, string],
      { steCRV: string; crvToken: string; ldoToken: string }
    >;

    TokenAddressesSet(
      steCRV?: null,
      crvToken?: null,
      ldoToken?: null
    ): TypedEventFilter<
      [string, string, string],
      { steCRV: string; crvToken: string; ldoToken: string }
    >;

    "UtilityAddressesSet(address,address,address,address)"(
      crvStGauge?: null,
      crvPool?: null,
      ldoPool?: null,
      stEthPool?: null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        crvStGauge: string;
        crvPool: string;
        ldoPool: string;
        stEthPool: string;
      }
    >;

    UtilityAddressesSet(
      crvStGauge?: null,
      crvPool?: null,
      ldoPool?: null,
      stEthPool?: null
    ): TypedEventFilter<
      [string, string, string, string],
      {
        crvStGauge: string;
        crvPool: string;
        ldoPool: string;
        stEthPool: string;
      }
    >;

    "unstaked(address,uint256)"(
      user?: string | null,
      unstakedLp?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; unstakedLp: BigNumber }
    >;

    unstaked(
      user?: string | null,
      unstakedLp?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; unstakedLp: BigNumber }
    >;
  };

  estimateGas: {
    crvPool(overrides?: CallOverrides): Promise<BigNumber>;

    crvStGauge(overrides?: CallOverrides): Promise<BigNumber>;

    crvToken(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    farmCrvLdoRewards(
      _crvAmount: BigNumberish,
      _ldoAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ldoPool(overrides?: CallOverrides): Promise<BigNumber>;

    ldoToken(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    reInvestRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenAddresses(
      _steCrv: string,
      _crvToken: string,
      _ldoToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUtilityAddresses(
      _crvStGauge: string,
      _crvPool: string,
      _ldoPool: string,
      _stEthPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stEthPool(overrides?: CallOverrides): Promise<BigNumber>;

    stakeLp(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    steCRV(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeLp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultCompoundedLp(overrides?: CallOverrides): Promise<BigNumber>;

    vaultLdoRewardFunds(overrides?: CallOverrides): Promise<BigNumber>;

    vaultLpFunds(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    crvPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvStGauge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crvToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    farmCrvLdoRewards(
      _crvAmount: BigNumberish,
      _ldoAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ldoPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ldoToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reInvestRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenAddresses(
      _steCrv: string,
      _crvToken: string,
      _ldoToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUtilityAddresses(
      _crvStGauge: string,
      _crvPool: string,
      _ldoPool: string,
      _stEthPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stEthPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeLp(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    steCRV(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeLp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultCompoundedLp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultLdoRewardFunds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultLpFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
